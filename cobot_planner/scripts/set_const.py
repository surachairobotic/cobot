import sympy as sp
import numpy as np
import math
import time
import pickle
import lib_sympy as lib_sp
import lib_equation as lib_eq

g = 9.8

L = [[0,0,0.184]
,[0,0,0]
,[0.27203,0,0]
,[0,0.141,0]
,[0,0,0.109]
,[0,0.111,0]
]
'''
L_org = [0,0,0.184]
L = [[0,0,0]
,[0.27203,0,0]
,[0,0.141,0]
,[0,0,0.109]
,[0,0.111,0]
,[0,0,0]
,[0,0,0]
]
'''


'''
COM = [#[0,0,0]
[0,0,0.2]
,[0,0,0.1]
,[0,0,0.12]
,[0,0,0.05]
,[0,0,0.03]
,[0,0,0.04]
]

M = [0,3,2,2.2,1.5,1.2,0.8,0.7]
I = [np.diag([2,2,1])
, np.diag([1,1,2])
, np.diag([1,2,1])
, np.diag([1,2,2])
, np.diag([2,1,1])
, np.diag([1,2,1])
, np.diag([2,2,1])
]
'''
M = [0.95363, 0.91416, 1.53769, 0.16959000000000002, 0.71842, 0.0]
COM = [[-0.00284, -0.008220000000000002, 0.0012, 1.0], [0.14556, -0.02322, 0.00551, 1.0], [-0.0016899999999999999, 0.04343, -0.010230000000000001, 1.0], [0.0, 0.00536, 0.05461, 1.0], [-3e-05, 0.03277, -0.00538, 1.0], [0.0, 0.0, 0.0, 1.0]]
I = [[[0.132530668, 0.002230762, -0.000326473], [0.002230762, 0.038764478, -0.0009444620000000001], [-0.000326473, -0.0009444620000000001, 0.13311026799999998]], [[0.191710524, -0.30636858199999994, 0.133907096], [-0.30636858199999994, 2.382556166, 0.0014175389999999998], [0.133907096, 0.0014175389999999998, 2.385579838]], [[0.389376689, -0.011254494, 0.0026510740000000002], [-0.011254494, 0.099712162, -0.068326125], [0.0026510740000000002, -0.068326125, 0.322811008]], [[0.063546784, -0.0, -0.0], [-0.0, 0.05415326899999999, 0.005360706], [-0.0, 0.005360706, 0.012623114]], [[0.102093766, -8.0209e-05, 1.3168e-05], [-8.0209e-05, 0.024950659, -0.012666862], [1.3168e-05, -0.012666862, 0.08645460999999999]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]]

def run(joint_num,b_load=False):
  global L,COM,M,I,g

  if b_load:
    t_start = time.time()
    lib_eq.create_symbol(joint_num)
    print('Create symbols : %f s' % (time.time()-t_start))

    t_start = time.time()
    lib_eq.load('eq.pkl')
    print('Load data : %f s' % (time.time()-t_start))

  t_start = time.time()
  lib_eq.set_const(L,COM,M,I,g)
  print('Set constant : %f s' % (time.time()-t_start))

  t_start = time.time()
  lib_eq.save('eq_const.pkl')
  print('Save eq : %f s' % (time.time()-t_start))


if __name__ == "__main__":
  run(6,True)
