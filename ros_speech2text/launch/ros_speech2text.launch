<launch>
    <!-- sets env var for google apis to work /-->
    <env      name ="GOOGLE_APPLICATION_CREDENTIALS"   value="/home/mtec/catkin_ws/src/cobot/ros_speech2text/cobot-speech-to-text-e32e6c44bb45.json" />

    <!-- print level (shared throughout the control code) -->
    <arg name="print_level" default="5"/>

    <!-- starts node for asynchronous s2t /-->
    <node pkg="ros_speech2text" name="ros_speech2text" type="s2t.py" output="screen">

        <!-- location of the speech history for the session /-->
        <!-- <param    name ="speech_history"  value="~/.ros/ros_speech2text/speech_history" /> -->

        <!-- If do_transcription = False, do not transcribe audio (and send a dummy transcript) /-->
        <!-- <param    name ="do_transcription" value="True" /> -->

        <!-- device ID of audio source. If unknown, launch once and get param /ros_speech2text/available_audio_device /-->
        <param    name ="audio_device_name" value="default" />

        <!-- device name of audio source. Only used if audio_device_idx is not set. Uses the first device that contains the given name (case insensitive). /-->
        <!-- <param    name ="audio_device_idx" value="name" /> -->

        <!-- rate for your audio capturing device /-->
        <param    name ="audio_rate" value="44100" />

        <!-- param for static thresholding /-->
        <!-- <param    name ="audio_threshold" value="700"   /> -->

        <!-- param for using async API call /-->
        <!-- <param    name ="async_mode" value="True"  /> -->

        <!-- param for dynamic thresholding /-->
        <!-- <param    name ="enable_dynamic_threshold" value="True"  /> -->

        <!-- activate audio recording when volume is this percentage higher than average /-->
        <!-- <param    name ="audio_dynamic_percentage" value="50"  /> -->

        <!-- for x consecutive frames all louder than the percentage we specified, activate recording /-->
        <!-- <param    name ="audio_dynamic_frame" value="3"  /> -->

        <!-- min value of average volume to prevent system from being too sensitive in case of constantly quiet environments /-->
        <!-- <param    name ="audio_min_avg" value="100"  /> -->

        <!-- for n consecutive silent frames the recording ends /-->
        <!-- <param    name ="n_silent_chunks" value="10"  /> -->

        <!-- param for cleaning up audio and transcript data after node ends /-->
        <!-- <param    name ="cleanup" value="True"  /> -->

        <!-- list of context clues for speech recognition /-->
        <!-- <rosparam param="speech_context">[]</rosparam> -->
    </node>
</launch>
